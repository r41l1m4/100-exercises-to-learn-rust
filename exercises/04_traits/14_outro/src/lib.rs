// TODO: Define a new `SaturatingU16` type. (done)
//   It should hold a `u16` value. (done)
//   It should provide conversions from `u16`, `u8`, `&u16` and `&u8`. (done)
//   It should support addition with a right-hand side of type
//   SaturatingU16, u16, &u16, and &SaturatingU16. Addition should saturate at the
//   maximum value for `u16`. (done)
//   It should be possible to compare it with another `SaturatingU16` or a `u16`. (done)
//   It should be possible to print its debug representation. (done)
//
// Tests are located in the `tests` folderâ€”pay attention to the visibility of your types and methods.
use std::ops::Add;

#[derive(Debug, Copy, Clone, PartialEq)]
pub struct SaturatingU16 {
    value: u16,
}

// #########################################################

// Unnecessary as it's being generated by the 'derive' annotation on the struct definition.
// impl PartialEq<SaturatingU16> for SaturatingU16 {
//     fn eq(&self, other: &SaturatingU16) -> bool {
//         &self.value == &other.value
//     }
// }

impl PartialEq<u16> for SaturatingU16 {
    fn eq(&self, other: &u16) -> bool {
        &self.value == other
    }
}

// #######################################################

// SaturatingU16 + SaturatingU16 = SaturatingU16
// The 'Add' trait defaults 'RHS' to 'Self', so the type annotation on 'Add<SaturatingU16>' is redundant.
impl Add<SaturatingU16> for SaturatingU16 {
    type Output = SaturatingU16;

    fn add(self, rhs: SaturatingU16) -> Self::Output {
        let new_value = self.value.saturating_add(rhs.value);
        SaturatingU16 {
            value: new_value,
        }
    }
}

// SaturatingU16 + u16 = SaturatingU16
impl Add<u16> for SaturatingU16 {
    type Output = SaturatingU16;

    fn add(self, rhs: u16) -> Self::Output {
        let new_value = self.value.saturating_add(rhs);
        SaturatingU16 {
            value: new_value,
        }
    }
}

// SaturatingU16 + &SaturatingU16 = SaturatingU16
impl Add<&SaturatingU16> for SaturatingU16 {
    type Output = SaturatingU16;

    fn add(self, rhs: &SaturatingU16) -> Self::Output {
        let new_value = self.value.saturating_add(rhs.value);
        SaturatingU16 {
            value: new_value,
        }
    }
}

// SaturatingU16 + &u16 = SaturatingU16
impl Add<&u16> for SaturatingU16 {
    type Output = SaturatingU16;

    fn add(self, rhs: &u16) -> Self::Output {
        let new_value = self.value.saturating_add(*rhs);
        SaturatingU16 {
            value: new_value,
        }
    }
}

// ###################################################

impl From<u16> for SaturatingU16 {
    fn from(value: u16) -> Self {
        SaturatingU16 {
            value,
        }
    }
}

impl From<u8> for SaturatingU16 {
    fn from(value: u8) -> Self {
        SaturatingU16 {
            value: value.into(),
        }
    }
}

impl From<&u16> for SaturatingU16 {
    fn from(value: &u16) -> Self {
        SaturatingU16 {
            value: *value,
        }
    }
}

impl From<&u8> for SaturatingU16 {
    fn from(value: &u8) -> Self {
        // let new_value: u8 = *value;
        SaturatingU16 {
            value: (*value).into(),
        }
    }
}
